// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetorkAccesForm.DAL;

namespace NetorkAccesForm.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NetorkAccesForm.DAL.Entities.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("NetorkAccesForm.DAL.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("NetorkAccesForm.DAL.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("NetorkAccesForm.DAL.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ExipryDate");

                    b.Property<string>("Notes");

                    b.Property<string>("RequestReason");

                    b.Property<string>("RequestedBy");

                    b.Property<DateTime>("SubmissionDate");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("UserName");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("NetorkAccesForm.DAL.Entities.RequestedApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId");

                    b.Property<string>("Description");

                    b.Property<int>("RequestId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestedApplications");
                });

            modelBuilder.Entity("NetorkAccesForm.DAL.Entities.User", b =>
                {
                    b.Property<string>("UserName")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Building");

                    b.Property<int>("CityId");

                    b.Property<int>("DepartmentId");

                    b.Property<int>("EmployeeNo");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Phone");

                    b.Property<string>("Street");

                    b.Property<string>("TitleJob");

                    b.HasKey("UserName");

                    b.HasIndex("CityId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NetorkAccesForm.DAL.Entities.Request", b =>
                {
                    b.HasOne("NetorkAccesForm.DAL.Entities.User", "User")
                        .WithMany("Requests")
                        .HasForeignKey("UserName");
                });

            modelBuilder.Entity("NetorkAccesForm.DAL.Entities.RequestedApplication", b =>
                {
                    b.HasOne("NetorkAccesForm.DAL.Entities.Application", "Application")
                        .WithMany("RequestedApplications")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NetorkAccesForm.DAL.Entities.Request", "Request")
                        .WithMany("RequestedApplications")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NetorkAccesForm.DAL.Entities.User", b =>
                {
                    b.HasOne("NetorkAccesForm.DAL.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NetorkAccesForm.DAL.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
